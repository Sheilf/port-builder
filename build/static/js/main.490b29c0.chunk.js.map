{"version":3,"sources":["logo.svg","BlockChart/Block.js","BlockChart/BlockChart.js","CardGrid/CardGrid.js","Builder/Builder.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["Block","props","InputGroup","className","Prepend","Checkbox","aria-label","FormControl","BlockChart","blocks","map","item","CardGrid","Card","style","width","background","borderRadius","padding","boxShadow","Img","variant","src","Body","Title","Text","Button","Builder","useState","mode","setMode","cards","isModeChart","isModeCard","ButtonGroup","size","onClick","margin","border","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.490b29c0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import Button from 'react-bootstrap/Button'\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport '../styles/flex.css'\r\nimport { useState, useEffect } from 'react'\r\n\r\n\r\n\r\nexport const Block = (props) => {\r\n\r\n  return (\r\n    <InputGroup className=\"mb-3\">\r\n\r\n      <InputGroup.Prepend>\r\n          <InputGroup.Checkbox aria-label=\"Checkbox for following text input\" />\r\n      </InputGroup.Prepend>\r\n\r\n      <FormControl aria-label=\"Text input with checkbox\" />\r\n\r\n    \r\n    </InputGroup>\r\n  );\r\n}\r\n\r\n","import Button from 'react-bootstrap/Button'\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\r\nimport '../styles/flex.css'\r\nimport { useState, useEffect } from 'react'\r\nimport { Block } from './Block'\r\n\r\nexport const BlockChart = (props) => {\r\n\r\n  return (\r\n    \r\n\r\n    <section className=\"flex-column-centered\">\r\n      <h2> Blocks </h2>\r\n      { props.blocks.map(item => <Block />) }\r\n    </section>\r\n  );\r\n}\r\n\r\n","import ButtonGroup from 'react-bootstrap/ButtonGroup'\r\nimport { Card, Title, Body, Img, Text, Button } from 'react-bootstrap'\r\n\r\nimport '../styles/flex.css'\r\nimport { useState, useEffect } from 'react'\r\nexport const CardGrid = () => {\r\n\r\n  return (\r\n    \r\n\r\n    <section className=\"flex-column-centered\">\r\n        <h2> Cards </h2>\r\n         \r\n\r\n        <Card style={{ width: '18rem', background: 'linear-gradient(to top, #FFF5CA , #FF64FF) no-repeat fixed', borderRadius: '16px', padding: '16px', boxShadow: '0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)' }}>\r\n            <Card.Img variant=\"top\" src=\"https://i.pinimg.com/originals/b6/9c/bb/b69cbb3258ed8f69b4e988eab4946a9a.png\" />\r\n            <Card.Body>\r\n                <Card.Title>Card Title</Card.Title>\r\n                <Card.Text>\r\n                    Some quick example text to build on the card title and make up the bulk of\r\n                    the card's content.\r\n                </Card.Text>\r\n\r\n                <Button variant=\"primary\">Data</Button>\r\n            </Card.Body>\r\n        </Card>\r\n\r\n    </section>\r\n  );\r\n}\r\n\r\n","import Button from 'react-bootstrap/Button'\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\r\nimport '../styles/flex.css'\r\nimport { useState, useEffect } from 'react'\r\n\r\n\r\nimport {BlockChart} from '../BlockChart/BlockChart'\r\nimport {CardGrid} from '../CardGrid/CardGrid'\r\n\r\nexport const Builder = () => {\r\n\r\n  const [mode, setMode] = useState('card')\r\n\r\n  const [cards, setCards] = useState([ \r\n    {},\r\n    {},\r\n    {}\r\n  ])\r\n\r\n  const [blocks, setBlocks] = useState([\r\n    {},\r\n    {},\r\n    {},\r\n\r\n  ])\r\n\r\n\r\n\r\n\r\n  const isModeChart = mode === 'block'\r\n  const isModeCard  = mode === 'card'\r\n\r\n\r\n  //get database data and set mode\r\n\r\n  return (\r\n\r\n\r\n    <section className=\"flex-column-centered\">\r\n        \r\n        <div>\r\n\r\n        </div>\r\n\r\n        <ButtonGroup size=\"lg\" className=\"mb-2\">\r\n            <Button onClick = { () => setMode('block') } style={{ margin: '16px', border: isModeChart ? '2px solid #7E93E8': null }}>Blocks</Button>\r\n            <Button onClick = { () => setMode('card')  } style={{ margin: '16px', border: isModeCard ? '2px solid #7E93E8': null }}>Cards</Button>\r\n        </ButtonGroup>\r\n\r\n\r\n\r\n        {/* conditional re-render ok for now. May change based on API setup */}\r\n        {\r\n            isModeChart ? \r\n            <BlockChart blocks={blocks}/>\r\n            :\r\n            <CardGrid cards={cards}/>\r\n        }\r\n    </section>\r\n\r\n\r\n\r\n\r\n  );\r\n}\r\n\r\n","import logo from './logo.svg';\nimport './App.css';\nimport './styles/flex.css'\nimport { Builder } from './Builder/Builder'\n\nfunction App() {\n\n  //app setup. Tunnel content through here\n  return (\n    <main className=\"flex-column-centered\">\n      Port Building App.\n\n      <Builder />\n\n\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nserviceWorker.register();\n"],"sourceRoot":""}